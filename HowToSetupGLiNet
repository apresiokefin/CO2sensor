This tutorial assumes that the GL.iNet used OpenWrt-Chaos Chalmers version.

Hardware to prepare:
-GL.iNet (we used GL.iNet 6416)
-SIM800L Module
-Alphasense NDIR CO2 Sensor including its transmission board
-AEROCET 831 
-Internet source (smartphone tethering, lan connection)

Basically, the flow of data follows:
Sensor(s) --> USB port(s) --> GL.iNet --> Serial port --> SIM800L

There is some steps needed in order to make that data flow works.
Some things to notes are:
1. OpenWrt is not naturally equipped with USB-serial drivers
2. OpenWrt serial port by default is prepared to receive signal from outside
3. Never command 'reboot' when ssh still connected, it causes the network port unaccessible
4. We utilize python script to mine sensors' data 
5. Driver/software packages are installed using internet

We need to access GL.iNet using ssh. We use Linux(Ubuntu) to access GL.iNet, so from terminal:
sudo ssh root@192.168.1.1

That address is the default address after fresh flashing of OpenWrt

If internet connection has been established, we then install drivers using these command:
opkg update
opkg install kmod-usb-acm kmod-usb-core kmod-usb-ohci kmod-usb-serial kmod-usb-serial-cp210x
opkg install kmod-usb-serial-ftdi kmod-usb-uhci kmod-usb2
opkg install python-light python-pyserial
opkg install screen #optional, useful for troubleshooting#

Some drivers (kmod-usb*) might be already installed.

Then we have to enable access of serial from inside GL.iNet. Configuration file /etc/inittab must be changed.
Initially, inside the file are:
::sysinit:/etc/init.d/rcS S boot
::shutdown:/etc/init.d/rcS K shutdown
::askconsole:/bin/ash --login

Access to console should be terminated. So, add # to disable the command like this:
::sysinit:/etc/init.d/rcS S boot
::shutdown:/etc/init.d/rcS K shutdown
#ttyATH0access::askconsole:/bin/ash --login

Now, power off the GL.iNet then power it on (avoid reboot command from ssh)

GL.iNet has acquired softwares and drivers needed. Then transfer python script (CO2.py;PM.py) to GL.iNet. 
In order to run these scripts following certain schedule, use Cron which is by default already installed in OpenWrt.
We put the python scripts in /root, then edit Cron configuration using:
crontab -e

Add new line and fill it according to the time scheduling rule of Cron.
For example, we assign CO2.py to run every 5 minutes, the new line will be:
*/5 * * * * /usr/bin/python /root/CO2.py > /root/logCO2.log

The output of the program will be saved in log file (logCO2.log).
That is the end of this setup tutorial.
